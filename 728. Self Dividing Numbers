question:
A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note:

The boundaries of each input argument are 1 <= left <= right <= 10000.

answer:
/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* selfDividingNumbers(int left, int right, int* returnSize) {
    int a,b,c,d;
    *returnSize=0;
    int *output=(int *)malloc((right-left+1)*sizeof(int));
    for(int i=left;i<=right;i++)
    {
        while(i!=10000)
        {
            if(i>1000)
            {
                a=i/1000;
                b=i/100-a*10;
                c=i/10-a*100-b*10;
                d=i%10;
                if(b!=0&&c!=0&&d!=0&&i%a==0&&i%b==0&&i%c==0&&i%d==0)
                    output[(*returnSize)++]=i;
                break;
            }
            else if(i>100)
            {
                b=i/100;
                c=(i-b*100)/10;
                d=i%10;
                if(c!=0&&d!=0&&i%b==0&&i%c==0&&i%d==0)
                     output[(*returnSize)++]=i;
                break;
            }
            else if(i>=10)
            {
                c=i/10;
                d=i%10;
                if(d!=0&&i%c==0&&i%d==0)
                    output[(*returnSize)++]=i;
                break;
            }
            else  
            {
                output[(*returnSize)++]=i;
                break;
            }
         }
    }
    return output;
}
